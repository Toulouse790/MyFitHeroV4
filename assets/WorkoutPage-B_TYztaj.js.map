{"version":3,"file":"WorkoutPage-B_TYztaj.js","sources":["../../node_modules/lucide-react/dist/esm/icons/pause.js","../../node_modules/lucide-react/dist/esm/icons/pen-line.js","../../node_modules/lucide-react/dist/esm/icons/square.js","../../src/features/workout/hooks/useWorkoutSessionCore.ts","../../src/features/workout/hooks/useWorkoutTimer.ts","../../src/features/workout/hooks/useWorkoutExercises.ts","../../src/features/workout/hooks/useExerciseHistory.ts","../../src/features/workout/hooks/useWorkoutSession.ts","../../src/features/workout/pages/WorkoutPage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.541.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"rect\", { x: \"14\", y: \"3\", width: \"5\", height: \"18\", rx: \"1\", key: \"kaeet6\" }],\n  [\"rect\", { x: \"5\", y: \"3\", width: \"5\", height: \"18\", rx: \"1\", key: \"1wsw3u\" }]\n];\nconst Pause = createLucideIcon(\"pause\", __iconNode);\n\nexport { __iconNode, Pause as default };\n//# sourceMappingURL=pause.js.map\n","/**\n * @license lucide-react v0.541.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M13 21h8\", key: \"1jsn5i\" }],\n  [\n    \"path\",\n    {\n      d: \"M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z\",\n      key: \"1a8usu\"\n    }\n  ]\n];\nconst PenLine = createLucideIcon(\"pen-line\", __iconNode);\n\nexport { __iconNode, PenLine as default };\n//# sourceMappingURL=pen-line.js.map\n","/**\n * @license lucide-react v0.541.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"rect\", { width: \"18\", height: \"18\", x: \"3\", y: \"3\", rx: \"2\", key: \"afitv7\" }]\n];\nconst Square = createLucideIcon(\"square\", __iconNode);\n\nexport { __iconNode, Square as default };\n//# sourceMappingURL=square.js.map\n","// hooks/workout/useWorkoutSessionCore.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { useToast } from '@/shared/hooks/use-toast';\nimport { appStore } from '@/store/appStore';\nimport { supabase } from '@/lib/supabase';\nimport { useQueryClient } from '@tanstack/react-query';\nimport type { WorkoutSession, WorkoutExercise, ExerciseSet } from '@/shared/types/workout.types';\n\nexport interface UseWorkoutSessionCoreReturn {\n  currentSession: WorkoutSession | null;\n  isSessionActive: boolean;\n  startSession: (\n    workoutName: string,\n    options?: {\n      targetDuration?: number;\n      workout_type?: WorkoutSession['workout_type'];\n      difficulty?: WorkoutSession['difficulty'];\n      exercises?: WorkoutExercise[];\n    }\n  ) => Promise<void>;\n  pauseSession: () => Promise<void>;\n  resumeSession: () => Promise<void>;\n  completeSession: () => Promise<void>;\n  cancelSession: () => Promise<void>;\n  calculateCalories: (minutes: number) => number;\n  updateSession: (updates: Partial<WorkoutSession>) => void;\n}\n\nexport const useWorkoutSessionCore = (): UseWorkoutSessionCoreReturn => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { appStoreUser } = appStore();\n\n  const [currentSession, setCurrentSession] = useState<WorkoutSession | null>(() =>\n    loadLocalSession()\n  );\n  const [isSessionActive, setIsSessionActive] = useState<boolean>(\n    () => loadLocalSession()?.status === 'active' || false\n  );\n\n  // Utilitaires localStorage\n  const saveLocalSession = (session: WorkoutSession | null) => {\n    if (session) {\n      localStorage.setItem('currentWorkoutSession', JSON.stringify(session));\n    } else {\n      localStorage.removeItem('currentWorkoutSession');\n    }\n  };\n\n  function loadLocalSession(): WorkoutSession | null {\n    try {\n      const raw = localStorage.getItem('currentWorkoutSession');\n      return raw ? (JSON.parse(raw) as WorkoutSession) : null;\n    } catch {\n      console.error('Erreur parsing session localStorage:', error);\n      localStorage.removeItem('currentWorkoutSession');\n      return null;\n    }\n  }\n\n  const calculateCalories = useCallback(\n    (minutes: number) => {\n      const w = appStoreUser?.weight_kg || 70;\n      const MET = 6;\n      return Math.round((w * MET * minutes) / 60);\n    },\n    [appStoreUser?.weight_kg]\n  );\n\n  const persistToSupabase = async (session: WorkoutSession) => {\n    try {\n      // Adapter les donnÃ©es pour correspondre au schÃ©ma Supabase\n      const workoutData = {\n        id: session.id,\n        user_id: session.user_id,\n        name: session.name,\n        workout_type: session.workout_type,\n        difficulty: session.difficulty,\n        started_at: session.startTime,\n        completed_at: session.endTime,\n        duration_minutes: Math.floor(session.duration / 60),\n        calories_burned: session.caloriesBurned,\n        exercises: session.exercises,\n        notes: session.notes,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      const { error } = await (supabase as any).from('workouts').upsert(workoutData);\n\n      if (error) throw error;\n      queryClient.invalidateQueries({ queryKey: ['workouts', session.user_id] });\n    } catch (e) {\n      console.error('Supabase persistence error:', e);\n    }\n  };\n\n  const updateSession = useCallback(\n    (updates: Partial<WorkoutSession>) => {\n      if (!currentSession) return;\n      const updatedSession = { ...currentSession, ...updates };\n      setCurrentSession(updatedSession);\n      saveLocalSession(updatedSession);\n      persistToSupabase(updatedSession);\n    },\n    [currentSession]\n  );\n\n  const startSession = useCallback(\n    async (\n      workoutName: string,\n      {\n        targetDuration = 30,\n        workout_type = 'strength',\n        difficulty = 'intermediate',\n        exercises = [] as WorkoutExercise[],\n      } = {}\n    ) => {\n      if (!appStoreUser?.id) {\n        toast({\n          title: 'Erreur',\n          description: 'Utilisateur non connectÃ©',\n          variant: 'destructive',\n        });\n        return;\n      }\n\n      const newSession: WorkoutSession = {\n        id: crypto.randomUUID(),\n        user_id: appStoreUser.id,\n        name: workoutName,\n        startTime: new Date().toISOString(),\n        duration: 0,\n        targetDuration,\n        status: 'active',\n        caloriesBurned: 0,\n        workout_type: workout_type as 'strength' | 'cardio' | 'flexibility' | 'sports' | 'other',\n        difficulty: difficulty as 'beginner' | 'intermediate' | 'advanced',\n        exercises,\n      };\n\n      setCurrentSession(newSession);\n      setIsSessionActive(true);\n      saveLocalSession(newSession);\n      await persistToSupabase(newSession);\n\n      toast({\n        title: 'Session dÃ©marrÃ©e',\n        description: `Â« ${workoutName} Â» en cours`,\n      });\n\n      // Analytics\n      if (typeof window !== 'undefined' && (window as any).gtag) {\n        (window as any).gtag('event', 'workout_started', {\n          workout_name: workoutName,\n          workout_type,\n          user_id: appStoreUser.id,\n        });\n      }\n    },\n    [appStoreUser?.id, toast, persistToSupabase]\n  );\n\n  const pauseSession = useCallback(async () => {\n    if (!currentSession) return;\n    const updated = { ...currentSession, status: 'paused' as const };\n    setCurrentSession(updated);\n    setIsSessionActive(false);\n    saveLocalSession(updated);\n    await persistToSupabase(updated);\n\n    toast({\n      title: 'Session en pause',\n      description: 'Reprenez quand vous Ãªtes prÃªt',\n    });\n  }, [currentSession, persistToSupabase, toast]);\n\n  const resumeSession = useCallback(async () => {\n    if (!currentSession) return;\n    const updated = { ...currentSession, status: 'active' as const };\n    setCurrentSession(updated);\n    setIsSessionActive(true);\n    saveLocalSession(updated);\n    await persistToSupabase(updated);\n\n    toast({\n      title: 'Session reprise',\n      description: 'Bon entraÃ®nement !',\n    });\n  }, [currentSession, persistToSupabase, toast]);\n\n  const completeSession = useCallback(async () => {\n    if (!currentSession || !appStoreUser?.id) return;\n\n    const end = new Date();\n    const durationSec = Math.floor(\n      (end.getTime() - new Date(currentSession.startTime).getTime()) / 1000\n    );\n\n    const completed: WorkoutSession = {\n      ...currentSession,\n      endTime: end.toISOString(),\n      duration: durationSec,\n      caloriesBurned: calculateCalories(durationSec / 60),\n      status: 'completed',\n    };\n\n    setCurrentSession(completed);\n    setIsSessionActive(false);\n    saveLocalSession(null);\n    await persistToSupabase(completed);\n\n    // Mettre Ã  jour les stats quotidiennes\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      await (supabase as any).from('daily_stats').upsert(\n        {\n          user_id: appStoreUser.id,\n          stat_date: today,\n          workouts_completed: 1,\n          total_workout_minutes: Math.floor(durationSec / 60),\n          calories_burned: completed.caloriesBurned,\n        },\n        {\n          onConflict: 'user_id,stat_date',\n        }\n      );\n    } catch {\n      console.error('Erreur mise Ã  jour stats quotidiennes:', error);\n    }\n\n    toast({\n      title: 'Session terminÃ©e ! ðŸŽ‰',\n      description: `${Math.round(durationSec / 60)} min â€¢ ${completed.caloriesBurned} kcal`,\n    });\n\n    // Analytics\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      (window as any).gtag('event', 'workout_completed', {\n        duration_minutes: Math.round(durationSec / 60),\n        calories_burned: completed.caloriesBurned,\n        workout_type: completed.workout_type,\n        user_id: appStoreUser.id,\n      });\n    }\n  }, [currentSession, calculateCalories, toast, appStoreUser?.id, persistToSupabase]);\n\n  const cancelSession = useCallback(async () => {\n    if (!currentSession) return;\n    const cancelled = { ...currentSession, status: 'cancelled' as const };\n    setCurrentSession(cancelled);\n    setIsSessionActive(false);\n    saveLocalSession(null);\n    await persistToSupabase(cancelled);\n\n    toast({\n      title: 'Session annulÃ©e',\n      variant: 'destructive',\n    });\n  }, [currentSession, toast, persistToSupabase]);\n\n  // Sync au montage - rÃ©cupÃ©rer session interrompue\n  useEffect(() => {\n    const loadInterruptedSession = async () => {\n      if (appStoreUser?.id && !currentSession) {\n        try {\n          const { data, error } = await supabase\n            .from('workouts')\n            .select('*')\n            .eq('user_id', appStoreUser.id)\n            .is('completed_at', null) // Sessions non terminÃ©es\n            .order('started_at', { ascending: false })\n            .limit(1);\n\n          if (!error && data && data.length > 0) {\n            const dbSession = data[0] as any;\n            // Convertir les donnÃ©es DB vers le format WorkoutSession\n            const session: WorkoutSession = {\n              id: dbSession.id,\n              user_id: dbSession.user_id,\n              name: dbSession.name,\n              startTime: dbSession.started_at,\n              endTime: dbSession.completed_at,\n              duration: (dbSession.duration_minutes || 0) * 60,\n              targetDuration: 30, // Valeur par dÃ©faut\n              status: dbSession.completed_at ? 'completed' : 'active',\n              caloriesBurned: dbSession.calories_burned || 0,\n              workout_type: dbSession.workout_type || 'strength',\n              difficulty: dbSession.difficulty || 'intermediate',\n              exercises: dbSession.exercises || [],\n              notes: dbSession.notes,\n            };\n\n            setCurrentSession(session);\n            setIsSessionActive(session.status === 'active');\n            saveLocalSession(session);\n          }\n        } catch {\n          console.error('Erreur rÃ©cupÃ©ration session interrompue:', error);\n        }\n      }\n    };\n\n    loadInterruptedSession();\n  }, [appStoreUser?.id, currentSession]);\n\n  return {\n    currentSession,\n    isSessionActive,\n    startSession,\n    pauseSession,\n    resumeSession,\n    completeSession,\n    cancelSession,\n    calculateCalories,\n    updateSession,\n  };\n};\n","// hooks/workout/useWorkoutTimer.ts\nimport { useState, useEffect, useCallback, useRef } from 'react';\n\nexport interface UseWorkoutTimerReturn {\n  totalTime: number;\n  exerciseTime: number;\n  restTime: number;\n  isResting: boolean;\n  startExerciseTimer: () => void;\n  startRestTimer: (duration: number) => void;\n  pauseTimer: () => void;\n  resumeTimer: () => void;\n  resetTimer: () => void;\n  formatTime: (seconds: number) => string;\n}\n\nexport const useWorkoutTimer = (isSessionActive: boolean): UseWorkoutTimerReturn => {\n  const [totalTime, setTotalTime] = useState(0);\n  const [exerciseTime, setExerciseTime] = useState(0);\n  const [restTime, setRestTime] = useState(0);\n  const [isResting, setIsResting] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const restTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Timer principal\n  useEffect(() => {\n    if (isSessionActive && !isPaused) {\n      intervalRef.current = setInterval(() => {\n        setTotalTime(prev => prev + 1);\n        if (isResting) {\n          setRestTime(prev => Math.max(0, prev - 1));\n        } else {\n          setExerciseTime(prev => prev + 1);\n        }\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isSessionActive, isPaused, isResting]);\n\n  const startExerciseTimer = useCallback(() => {\n    setIsResting(false);\n    setExerciseTime(0);\n    if (restTimeoutRef.current) {\n      clearTimeout(restTimeoutRef.current);\n      restTimeoutRef.current = null;\n    }\n  }, []);\n\n  const startRestTimer = useCallback((duration: number) => {\n    setIsResting(true);\n    setRestTime(duration);\n\n    restTimeoutRef.current = setTimeout(() => {\n      setIsResting(false);\n      setRestTime(0);\n    }, duration * 1000);\n  }, []);\n\n  const pauseTimer = useCallback(() => {\n    setIsPaused(true);\n  }, []);\n\n  const resumeTimer = useCallback(() => {\n    setIsPaused(false);\n  }, []);\n\n  const resetTimer = useCallback(() => {\n    setTotalTime(0);\n    setExerciseTime(0);\n    setRestTime(0);\n    setIsResting(false);\n    setIsPaused(false);\n\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    if (restTimeoutRef.current) {\n      clearTimeout(restTimeoutRef.current);\n      restTimeoutRef.current = null;\n    }\n  }, []);\n\n  const formatTime = useCallback((seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  return {\n    totalTime,\n    exerciseTime,\n    restTime,\n    isResting,\n    startExerciseTimer,\n    startRestTimer,\n    pauseTimer,\n    resumeTimer,\n    resetTimer,\n    formatTime,\n  };\n};\n","import { useCallback } from 'react';\nimport { useToast } from '@/shared/hooks/use-toast';\nimport { WorkoutSession, WorkoutExercise, ExerciseSet } from './useWorkoutSessionCore';\n\nexport interface UseWorkoutExercisesReturn {\n  addExercise: (exercise: Omit<WorkoutExercise, 'id'>) => Promise<void>;\n  updateExerciseSet: (\n    exerciseId: string,\n    setIndex: number,\n    updates: Partial<ExerciseSet>\n  ) => Promise<void>;\n  completeExercise: (exerciseId: string) => Promise<void>;\n  addSetToExercise: (exerciseId: string, newSet?: Partial<ExerciseSet>) => Promise<void>;\n  removeSetFromExercise: (exerciseId: string, setIndex: number) => Promise<void>;\n}\n\nexport const useWorkoutExercises = (\n  currentSession: WorkoutSession | null,\n  updateSession: (updates: Partial<WorkoutSession>) => void,\n  saveWeightHistory: (exerciseName: string, weight: number) => void\n): UseWorkoutExercisesReturn => {\n  const { toast } = useToast();\n\n  const addExercise = useCallback(\n    async (exercise: Omit<WorkoutExercise, 'id'>) => {\n      if (!currentSession) return;\n      const newEx: WorkoutExercise = { ...exercise, id: crypto.randomUUID() };\n      updateSession({\n        exercises: [...currentSession.exercises, newEx],\n      });\n    },\n    [currentSession, updateSession]\n  );\n\n  const updateExerciseSet = useCallback(\n    async (exerciseId: string, setIndex: number, updates: Partial<ExerciseSet>) => {\n      if (!currentSession) return;\n\n      const updatedExercises = currentSession.exercises.map(ex => {\n        if (ex.id !== exerciseId) return ex;\n\n        const updatedSets = ex.sets.map((set, index) => {\n          if (index !== setIndex) return set;\n\n          // Ajouter timestamp si le set devient complÃ©tÃ©\n          const setUpdates = { ...updates };\n          if (updates.completed && !set.completed) {\n            setUpdates.timestamp = new Date().toISOString();\n          }\n\n          return { ...set, ...setUpdates };\n        });\n\n        // Marquer l'exercice terminÃ© si toutes les sÃ©ries le sont\n        const completed = updatedSets.every(s => s.completed);\n\n        return { ...ex, sets: updatedSets, completed };\n      });\n\n      updateSession({ exercises: updatedExercises });\n\n      // Sauvegarder l'historique des poids\n      if (updates.weight && updates.weight > 0) {\n        const exercise = currentSession.exercises.find(e => e.id === exerciseId);\n        if (exercise) {\n          saveWeightHistory(exercise.name, updates.weight);\n        }\n      }\n    },\n    [currentSession, updateSession, saveWeightHistory]\n  );\n\n  const completeExercise = useCallback(\n    async (exerciseId: string) => {\n      if (!currentSession) return;\n\n      const updatedExercises = currentSession.exercises.map(ex =>\n        ex.id === exerciseId\n          ? {\n              ...ex,\n              completed: true,\n              sets: ex.sets.map(set => ({\n                ...set,\n                completed: true,\n                timestamp: new Date().toISOString(),\n              })),\n            }\n          : ex\n      );\n\n      updateSession({ exercises: updatedExercises });\n\n      toast({\n        title: 'Exercice terminÃ©',\n        description: 'Bravo ! Toutes les sÃ©ries sont complÃ©tÃ©es',\n      });\n    },\n    [currentSession, updateSession, toast]\n  );\n\n  const addSetToExercise = useCallback(\n    async (exerciseId: string, newSet?: Partial<ExerciseSet>) => {\n      if (!currentSession) return;\n\n      const defaultSet: ExerciseSet = {\n        reps: 0,\n        weight: 0,\n        completed: false,\n        ...newSet,\n      };\n\n      const updatedExercises = currentSession.exercises.map(ex =>\n        ex.id === exerciseId ? { ...ex, sets: [...ex.sets, defaultSet] } : ex\n      );\n\n      updateSession({ exercises: updatedExercises });\n\n      toast({\n        title: 'SÃ©rie ajoutÃ©e',\n        description: \"Nouvelle sÃ©rie ajoutÃ©e Ã  l'exercice\",\n      });\n    },\n    [currentSession, updateSession, toast]\n  );\n\n  const removeSetFromExercise = useCallback(\n    async (exerciseId: string, setIndex: number) => {\n      if (!currentSession) return;\n\n      const updatedExercises = currentSession.exercises.map(ex =>\n        ex.id === exerciseId\n          ? {\n              ...ex,\n              sets: ex.sets.filter((_, i) => i !== setIndex),\n              completed: false, // RÃ©initialiser le statut de l'exercice\n            }\n          : ex\n      );\n\n      updateSession({ exercises: updatedExercises });\n\n      toast({\n        title: 'SÃ©rie supprimÃ©e',\n        description: \"La sÃ©rie a Ã©tÃ© retirÃ©e de l'exercice\",\n      });\n    },\n    [currentSession, updateSession, toast]\n  );\n\n  return {\n    addExercise,\n    updateExerciseSet,\n    completeExercise,\n    addSetToExercise,\n    removeSetFromExercise,\n  };\n};\n","// hooks/workout/useExerciseHistory.ts\nimport { useCallback } from 'react';\nimport { appStore } from '@/store/appStore';\nimport { supabase } from '@/lib/supabase';\nimport type { WorkoutExercise } from '@/shared/types/workout';\n\nexport interface UseExerciseHistoryReturn {\n  getLastWeightForExercise: (exerciseName: string) => number | null;\n  saveWeightHistory: (exerciseName: string, weight: number) => void;\n  loadExercisesFromLastSession: (workoutName: string) => Promise<WorkoutExercise[]>;\n}\n\nexport const useExerciseHistory = (): UseExerciseHistoryReturn => {\n  const { appStoreUser } = appStore();\n\n  const getLastWeightForExercise = useCallback(\n    (exerciseName: string): number | null => {\n      try {\n        const weightHistory = JSON.parse(localStorage.getItem('exerciseWeightHistory') || '{}');\n        const exerciseHistory = weightHistory[exerciseName];\n\n        if (!exerciseHistory?.length) return null;\n\n        const userHistory = exerciseHistory.filter(\n          (entry: any) => entry.userId === appStoreUser?.id\n        );\n        return userHistory.length ? userHistory[userHistory.length - 1].weight : null;\n      } catch {\n        console.error('Erreur lecture historique poids:', error);\n        return null;\n      }\n    },\n    [appStoreUser?.id]\n  );\n\n  const saveWeightHistory = useCallback(\n    (exerciseName: string, weight: number) => {\n      if (!appStoreUser?.id || weight <= 0) return;\n\n      try {\n        const history = JSON.parse(localStorage.getItem('exerciseWeightHistory') || '{}');\n        if (!history[exerciseName]) history[exerciseName] = [];\n\n        history[exerciseName].push({\n          weight,\n          date: new Date().toISOString(),\n          userId: appStoreUser.id,\n        });\n\n        // Garder seulement les 50 derniÃ¨res entrÃ©es par exercice\n        if (history[exerciseName].length > 50) {\n          history[exerciseName] = history[exerciseName].slice(-50);\n        }\n\n        localStorage.setItem('exerciseWeightHistory', JSON.stringify(history));\n      } catch {\n        console.error('Erreur sauvegarde historique poids:', error);\n      }\n    },\n    [appStoreUser?.id]\n  );\n\n  const loadExercisesFromLastSession = useCallback(\n    async (workoutName: string): Promise<WorkoutExercise[]> => {\n      if (!appStoreUser?.id) return [];\n\n      try {\n        const { data, error } = await supabase\n          .from('workouts')\n          .select('exercises')\n          .eq('user_id', appStoreUser.id)\n          .eq('name', workoutName)\n          .not('completed_at', 'is', null) // Sessions terminÃ©es\n          .order('completed_at', { ascending: false })\n          .limit(1);\n\n        if (error || !data?.length) {\n          console.log('Aucune session prÃ©cÃ©dente trouvÃ©e pour:', workoutName);\n          return [];\n        }\n\n        // RÃ©initialiser les exercices pour une nouvelle session\n        return (data[0].exercises as WorkoutExercise[]).map((ex: WorkoutExercise) => ({\n          ...ex,\n          id: crypto.randomUUID(),\n          completed: false,\n          sets: ex.sets.map(set => ({\n            ...set,\n            completed: false,\n            timestamp: undefined,\n          })),\n        }));\n      } catch {\n        console.error('Erreur chargement derniÃ¨re session:', error);\n        return [];\n      }\n    },\n    [appStoreUser?.id]\n  );\n\n  return {\n    getLastWeightForExercise,\n    saveWeightHistory,\n    loadExercisesFromLastSession,\n  };\n};\n","// hooks/workout/useWorkoutSession.ts\nimport { useWorkoutSessionCore } from './useWorkoutSessionCore';\nimport { useWorkoutTimer } from './useWorkoutTimer';\nimport { useWorkoutExercises } from './useWorkoutExercises';\nimport { useExerciseHistory } from './useExerciseHistory';\n\nexport const useWorkoutSession = () => {\n  const sessionCore = useWorkoutSessionCore();\n  const timer = useWorkoutTimer(sessionCore);\n  const history = useExerciseHistory();\n  const exercises = useWorkoutExercises(\n    sessionCore.currentSession,\n    sessionCore.updateSession,\n    history.saveWeightHistory\n  );\n\n  return {\n    // Ã‰tat de base\n    currentSession: sessionCore.currentSession,\n    isSessionActive: sessionCore.isSessionActive,\n\n    // Actions de session\n    startSession: sessionCore.startSession,\n    pauseSession: sessionCore.pauseSession,\n    resumeSession: sessionCore.resumeSession,\n    completeSession: sessionCore.completeSession,\n    cancelSession: sessionCore.cancelSession,\n\n    // Gestion des exercices\n    addExercise: exercises.addExercise,\n    updateExerciseSet: exercises.updateExerciseSet,\n    completeExercise: exercises.completeExercise,\n    addSetToExercise: exercises.addSetToExercise,\n    removeSetFromExercise: exercises.removeSetFromExercise,\n\n    // Historique et utilitaires\n    loadExercisesFromLastSession: history.loadExercisesFromLastSession,\n    getLastWeightForExercise: history.getLastWeightForExercise,\n\n    // Utilitaires\n    calculateCalories: sessionCore.calculateCalories,\n    formatTime: timer.formatTime,\n  };\n};\n\n// Export des types pour rÃ©utilisation\nexport type { WorkoutSession, WorkoutExercise, ExerciseSet } from '@/shared/types/workout';\n","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport {\n  Dumbbell,\n  Play,\n  Pause,\n  Target,\n  CheckCircle,\n  ChevronUp,\n  ChevronDown,\n  Minus,\n  Plus,\n  Save,\n  Edit3,\n  TrendingUp,\n  Trophy,\n  Square,\n  Zap,\n  Clock,\n  Info,\n} from 'lucide-react';\nimport { User as SupabaseAuthUserType } from '@supabase/supabase-js';\nimport { useWorkoutSession } from '@/features/workout/hooks/useWorkoutSession';\nimport type { WorkoutExercise } from '@/shared/types/workout.types';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n\ninterface WorkoutPageProps {\n  userProfile?: SupabaseAuthUserType;\n}\n\ninterface SetEditState {\n  exerciseId: string;\n  setIndex: number;\n  field: 'reps' | 'weight' | 'duration';\n  value: string;\n}\n\nconst WorkoutPage: React.FC<WorkoutPageProps> = () => {\n  const {\n    currentSession,\n    isSessionActive,\n    startSession,\n    pauseSession,\n    resumeSession,\n    completeSession,\n    cancelSession,\n    _addExercise,\n    updateExerciseSet,\n    completeExercise,\n    addSetToExercise,\n    removeSetFromExercise,\n    loadExercisesFromLastSession,\n    _getLastWeightForExercise,\n    calculateCalories,\n    formatTime,\n  } = useWorkoutSession();\n  const [, setLocation] = useLocation();\n  const [editingSet, setEditingSet] = useState<SetEditState | null>(null);\n  const [workoutTime, setWorkoutTime] = useState(0);\n  const [expandedExercise, setExpandedExercise] = useState<string | null>(null);\n  const [quickMode, setQuickMode] = useState(false);\n  const [showSessionSummary, setShowSessionSummary] = useState(false);\n  const [__error, __setError] = useState<string | null>(null);\n  const [isLoading, __setIsLoading] = useState(false);\n\n  // Exercices par dÃ©faut\n  const defaultExercises: WorkoutExercise[] = [\n    {\n      id: 'ex-1',\n      name: 'DÃ©veloppÃ© CouchÃ©',\n      category: 'strength',\n      muscle_groups: ['chest', 'shoulders', 'triceps'],\n      sets: [\n        { reps: 10, weight: 60, completed: false },\n        { reps: 8, weight: 65, completed: false },\n        { reps: 6, weight: 70, completed: false },\n      ],\n      completed: false,\n      restTime: 120,\n    },\n    {\n      id: 'ex-2',\n      name: 'Squats',\n      category: 'strength',\n      muscle_groups: ['quads', 'glutes', 'hamstrings'],\n      sets: [\n        { reps: 12, weight: 80, completed: false },\n        { reps: 10, weight: 85, completed: false },\n        { reps: 8, weight: 90, completed: false },\n      ],\n      completed: false,\n      restTime: 90,\n    },\n    {\n      id: 'ex-3',\n      name: 'Tractions',\n      category: 'strength',\n      muscle_groups: ['back', 'biceps'],\n      sets: [\n        { reps: 8, completed: false },\n        { reps: 6, completed: false },\n        { reps: 5, completed: false },\n      ],\n      completed: false,\n      restTime: 90,\n    },\n  ];\n\n  // Tips d'entraÃ®nement contextuels\n  const workoutTips = [\n    { icon: Zap, text: 'Concentrez-vous sur la forme plutÃ´t que sur le poids', priority: 'high' },\n    {\n      icon: Clock,\n      text: 'Respectez vos temps de repos pour optimiser la rÃ©cupÃ©ration',\n      priority: 'medium',\n    },\n    { icon: Info, text: 'Chaque sÃ©rie compte, mÃªme si elle semble facile', priority: 'high' },\n  ];\n\n  const getCurrentTip = () => {\n    const highPriorityTips = workoutTips.filter(tip => tip.priority === 'high');\n    return highPriorityTips[Math.floor(Math.random() * highPriorityTips.length)];\n  };\n\n  const handleStartWorkout = async () => {\n    const workoutName = 'EntraÃ®nement Force';\n    // Charger avec les donnÃ©es de la derniÃ¨re session\n    const exercisesToAdd = await loadExercisesFromLastSession(workoutName);\n\n    // DÃ©marrer la session avec les exercices\n    await startSession(workoutName, {\n      workout_type: 'strength',\n      difficulty: 'intermediate',\n      exercises: exercisesToAdd.length > 0 ? exercisesToAdd : defaultExercises,\n    });\n\n    // Ouvrir le premier exercice par dÃ©faut\n    if (exercisesToAdd.length > 0) {\n      setExpandedExercise(exercisesToAdd[0].id);\n    } else if (defaultExercises.length > 0) {\n      setExpandedExercise(defaultExercises[0].name);\n    }\n  };\n\n  const handleSetEdit = (\n    exerciseId: string,\n    setIndex: number,\n    field: 'reps' | 'weight' | 'duration'\n  ) => {\n    const exercise = currentSession?.exercises.find(e => e.id === exerciseId);\n    const set = exercise?.sets[setIndex];\n\n    if (set) {\n      setEditingSet({\n        exerciseId,\n        setIndex,\n        field,\n        value: (set[field] || 0).toString(),\n      });\n    }\n  };\n\n  const handleSetSave = () => {\n    if (editingSet) {\n      const numValue = parseFloat(editingSet.value) || 0;\n      updateExerciseSet(editingSet.exerciseId, editingSet.setIndex, {\n        [editingSet.field]: numValue,\n      });\n      setEditingSet(null);\n    }\n  };\n\n  const handleSetComplete = (exerciseId: string, setIndex: number) => {\n    updateExerciseSet(exerciseId, setIndex, { completed: true });\n  };\n\n  const handleQuickSetComplete = (exerciseId: string, setIndex: number) => {\n    // En mode rapide, on valide juste la sÃ©rie sans Ã©dition\n    updateExerciseSet(exerciseId, setIndex, { completed: true });\n  };\n\n  const handleExerciseComplete = (exerciseId: string) => {\n    completeExercise(exerciseId);\n    // Passer au prochain exercice non terminÃ©\n    const nextExercise = currentSession?.exercises.find(e => !e.completed && e.id !== exerciseId);\n    if (nextExercise) {\n      setExpandedExercise(nextExercise.id);\n    }\n  };\n\n  const handleCompleteSession = () => {\n    completeSession();\n    setShowSessionSummary(true);\n  };\n\n  const incrementSet = (\n    exerciseId: string,\n    setIndex: number,\n    field: 'reps' | 'weight' | 'duration'\n  ) => {\n    const exercise = currentSession?.exercises.find(e => e.id === exerciseId);\n    const set = exercise?.sets[setIndex];\n\n    if (set) {\n      const currentValue = set[field] || 0;\n      const increment = field === 'weight' ? 2.5 : 1;\n      updateExerciseSet(exerciseId, setIndex, {\n        [field]: currentValue + increment,\n      });\n    }\n  };\n\n  const decrementSet = (\n    exerciseId: string,\n    setIndex: number,\n    field: 'reps' | 'weight' | 'duration'\n  ) => {\n    const exercise = currentSession?.exercises.find(e => e.id === exerciseId);\n    const set = exercise?.sets[setIndex];\n\n    if (set) {\n      const currentValue = set[field] || 0;\n      const decrement = field === 'weight' ? 2.5 : 1;\n      const newValue = Math.max(0, currentValue - decrement);\n      updateExerciseSet(exerciseId, setIndex, {\n        [field]: newValue,\n      });\n    }\n  };\n\n  // Timer pour suivre le temps d'entraÃ®nement\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n\n    if (isSessionActive && currentSession?.status === 'active') {\n      intervalId = setInterval(() => {\n        setWorkoutTime(prevTime => prevTime + 1);\n      }, 1000);\n    }\n\n    return () => clearInterval(intervalId);\n  }, [isSessionActive, currentSession?.status]);\n\n  // Calculer les statistiques\n  const completedExercises = currentSession?.exercises.filter(e => e.completed).length || 0;\n  const totalExercises = currentSession?.exercises.length || 0;\n  const progressPercentage = totalExercises > 0 ? (completedExercises / totalExercises) * 100 : 0;\n\n  // Calculer les calories brÃ»lÃ©es (estimation basique)\n  const estimatedCalories = calculateCalories\n    ? calculateCalories(workoutTime)\n    : Math.round(workoutTime * 0.15);\n\n  const currentTip = getCurrentTip();\n\n  const __handleCompleteWorkout = async () => {\n    if (currentSession) {\n      await completeSession();\n      setShowSessionSummary(true);\n      setLocation('/');\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-20\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center\">\n              <Dumbbell className=\"text-white\" size={20} />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-800\">\n                {currentSession?.name || 'EntraÃ®nement'}\n              </h1>\n              <p className=\"text-sm text-gray-600\">\n                {currentSession?.status === 'active' ? 'En cours' : 'PrÃªt Ã  commencer'}\n              </p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-lg font-bold text-blue-600\">{formatTime(workoutTime)}</div>\n            <p className=\"text-xs text-gray-500\">Temps Ã©coulÃ©</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 space-y-4\">\n        {!currentSession ? (\n          // Ã‰cran de dÃ©marrage\n          <div className=\"text-center py-12\">\n            <div className=\"mb-6\">\n              <Dumbbell size={64} className=\"mx-auto text-gray-400 mb-4\" />\n              <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">\n                PrÃªt pour l&apos;entraÃ®nement ?\n              </h2>\n              <p className=\"text-gray-600\">\n                Commencez votre session d&apos;entraÃ®nement maintenant\n              </p>\n            </div>\n            <Button onClick={handleStartWorkout} size=\"lg\" className=\"bg-red-600 hover:bg-red-700\">\n              <Play className=\"mr-2\" size={20} />\n              Commencer l&apos;entraÃ®nement\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Progress */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Target className=\"mr-2\" size={20} />\n                    Progression: {Math.round(progressPercentage)}%\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant={quickMode ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setQuickMode(!quickMode)}\n                      className=\"text-xs\"\n                    >\n                      {quickMode ? 'Mode Rapide' : 'Mode AvancÃ©'}\n                    </Button>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"w-full bg-gray-200 rounded-full h-3 mb-4\">\n                  <div\n                    className=\"bg-gradient-to-r from-green-500 to-blue-500 h-3 rounded-full transition-all duration-300\"\n                    style={{ width: `${progressPercentage}%` }}\n                  ></div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  {currentSession.status === 'active' ? (\n                    <Button onClick={pauseSession} variant=\"outline\" className=\"flex-1\">\n                      <Pause className=\"mr-2\" size={16} />\n                      Pause\n                    </Button>\n                  ) : (\n                    <Button\n                      onClick={resumeSession}\n                      className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                    >\n                      <Play className=\"mr-2\" size={16} />\n                      Reprendre\n                    </Button>\n                  )}\n                  <Button\n                    onClick={handleCompleteSession}\n                    className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                  >\n                    <CheckCircle className=\"mr-2\" size={16} />\n                    Terminer\n                  </Button>\n                  <Button\n                    onClick={cancelSession}\n                    variant=\"outline\"\n                    className=\"flex-1 text-red-600 border-red-600 hover:bg-red-50\"\n                  >\n                    <Square className=\"mr-2\" size={16} />\n                    ArrÃªter\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tip contextuel */}\n            <Card className=\"bg-blue-50 border-blue-100\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  {React.createElement(currentTip.icon, {\n                    size: 18,\n                    className: 'text-blue-500 mt-0.5',\n                  })}\n                  <div>\n                    <h3 className=\"font-semibold text-blue-800 text-sm mb-1\">\n                      Conseil d&apos;entraÃ®nement\n                    </h3>\n                    <p className=\"text-blue-700 text-xs\">{currentTip.text}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Exercises - ACCORDION */}\n            <div className=\"space-y-3\">\n              {currentSession?.exercises.map(exercise => (\n                <Card\n                  key={exercise.id}\n                  className={exercise.completed ? 'bg-green-50 border-green-200' : ''}\n                >\n                  <Collapsible\n                    open={expandedExercise === exercise.id}\n                    onOpenChange={isOpen => setExpandedExercise(isOpen ? exercise.id : null)}\n                  >\n                    <CollapsibleTrigger asChild>\n                      <CardHeader className=\"cursor-pointer hover:bg-gray-50 transition-colors\">\n                        <CardTitle className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Dumbbell className=\"text-orange-500\" size={16} />\n                            <span>{exercise.name}</span>\n                            {exercise.completed && (\n                              <CheckCircle className=\"text-green-600\" size={18} />\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {exercise.sets?.filter(s => s.completed).length || 0}/\n                              {exercise.sets?.length || 0} sÃ©ries\n                            </Badge>\n                            {expandedExercise === exercise.id ? (\n                              <ChevronUp size={20} className=\"text-gray-400\" />\n                            ) : (\n                              <ChevronDown size={20} className=\"text-gray-400\" />\n                            )}\n                          </div>\n                        </CardTitle>\n                      </CardHeader>\n                    </CollapsibleTrigger>\n\n                    <CollapsibleContent>\n                      <CardContent className=\"pt-0\">\n                        <div className=\"space-y-3\">\n                          {exercise.sets && exercise.sets.length > 0 ? (\n                            exercise.sets.map((set, setIndex) => (\n                              <div\n                                key={setIndex}\n                                className={`p-4 rounded-lg border-2 ${set.completed ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'}`}\n                              >\n                                <div className=\"flex items-center justify-between mb-3\">\n                                  <span className=\"font-medium text-gray-800\">\n                                    SÃ©rie {setIndex + 1}\n                                  </span>\n                                  {!set.completed && (\n                                    <Button\n                                      onClick={() =>\n                                        quickMode\n                                          ? handleQuickSetComplete(exercise.id, setIndex)\n                                          : handleSetComplete(exercise.id, setIndex)\n                                      }\n                                      size=\"sm\"\n                                      className=\"bg-green-600 hover:bg-green-700 h-8\"\n                                    >\n                                      <CheckCircle size={14} className=\"mr-1\" />\n                                      {quickMode ? 'Valider' : 'TerminÃ©'}\n                                    </Button>\n                                  )}\n                                </div>\n\n                                {!quickMode && (\n                                  <div className=\"flex items-center space-x-4\">\n                                    {/* RÃ©pÃ©titions */}\n                                    <div className=\"flex items-center space-x-2\">\n                                      <span className=\"text-sm text-gray-600 min-w-[40px]\">\n                                        Reps:\n                                      </span>\n                                      <div className=\"flex items-center space-x-1\">\n                                        <Button\n                                          onClick={() =>\n                                            decrementSet(exercise.id, setIndex, 'reps')\n                                          }\n                                          size=\"sm\"\n                                          variant=\"outline\"\n                                          className=\"h-8 w-8 p-0\"\n                                        >\n                                          <Minus size={14} />\n                                        </Button>\n                                        {editingSet?.exerciseId === exercise.id &&\n                                        editingSet?.setIndex === setIndex &&\n                                        editingSet?.field === 'reps' ? (\n                                          <div className=\"flex items-center space-x-1\">\n                                            <Input\n                                              value={editingSet.value}\n                                              onChange={e =>\n                                                setEditingSet({\n                                                  ...editingSet,\n                                                  value: e.target.value,\n                                                })\n                                              }\n                                              className=\"h-8 w-16 text-center text-sm\"\n                                            />\n                                            <Button\n                                              onClick={handleSetSave}\n                                              size=\"sm\"\n                                              className=\"h-8 w-8 p-0\"\n                                            >\n                                              <Save size={12} />\n                                            </Button>\n                                          </div>\n                                        ) : (\n                                          <button\n                                            onClick={() =>\n                                              handleSetEdit(exercise.id, setIndex, 'reps')\n                                            }\n                                            className=\"text-sm font-medium hover:text-blue-600 flex items-center space-x-1 min-w-[50px] justify-center h-8 px-2 border rounded\"\n                                          >\n                                            <span>{set.reps}</span>\n                                            <Edit3 size={10} />\n                                          </button>\n                                        )}\n                                        <Button\n                                          onClick={() =>\n                                            incrementSet(exercise.id, setIndex, 'reps')\n                                          }\n                                          size=\"sm\"\n                                          variant=\"outline\"\n                                          className=\"h-8 w-8 p-0\"\n                                        >\n                                          <Plus size={14} />\n                                        </Button>\n                                      </div>\n                                    </div>\n\n                                    {/* Poids (si applicable) */}\n                                    {set.weight !== undefined && (\n                                      <div className=\"flex items-center space-x-2\">\n                                        <span className=\"text-sm text-gray-600 min-w-[40px]\">\n                                          Poids:\n                                        </span>\n                                        <div className=\"flex items-center space-x-1\">\n                                          <Button\n                                            onClick={() =>\n                                              decrementSet(exercise.id, setIndex, 'weight')\n                                            }\n                                            size=\"sm\"\n                                            variant=\"outline\"\n                                            className=\"h-8 w-8 p-0\"\n                                          >\n                                            <Minus size={14} />\n                                          </Button>\n                                          {editingSet?.exerciseId === exercise.id &&\n                                          editingSet?.setIndex === setIndex &&\n                                          editingSet?.field === 'weight' ? (\n                                            <div className=\"flex items-center space-x-1\">\n                                              <Input\n                                                value={editingSet.value}\n                                                onChange={e =>\n                                                  setEditingSet({\n                                                    ...editingSet,\n                                                    value: e.target.value,\n                                                  })\n                                                }\n                                                className=\"h-8 w-16 text-center text-sm\"\n                                              />\n                                              <Button\n                                                onClick={handleSetSave}\n                                                size=\"sm\"\n                                                className=\"h-8 w-8 p-0\"\n                                              >\n                                                <Save size={12} />\n                                              </Button>\n                                            </div>\n                                          ) : (\n                                            <button\n                                              onClick={() =>\n                                                handleSetEdit(exercise.id, setIndex, 'weight')\n                                              }\n                                              className=\"text-sm font-medium hover:text-blue-600 flex items-center space-x-1 min-w-[60px] justify-center h-8 px-2 border rounded\"\n                                            >\n                                              <span>{set.weight}kg</span>\n                                              <Edit3 size={10} />\n                                            </button>\n                                          )}\n                                          <Button\n                                            onClick={() =>\n                                              incrementSet(exercise.id, setIndex, 'weight')\n                                            }\n                                            size=\"sm\"\n                                            variant=\"outline\"\n                                            className=\"h-8 w-8 p-0\"\n                                          >\n                                            <Plus size={14} />\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    )}\n\n                                    {/* DurÃ©e (si applicable) */}\n                                    {set.duration !== undefined && (\n                                      <div className=\"flex items-center space-x-2\">\n                                        <span className=\"text-sm text-gray-600 min-w-[40px]\">\n                                          DurÃ©e:\n                                        </span>\n                                        <div className=\"flex items-center space-x-1\">\n                                          <Button\n                                            onClick={() =>\n                                              decrementSet(exercise.id, setIndex, 'duration')\n                                            }\n                                            size=\"sm\"\n                                            variant=\"outline\"\n                                            className=\"h-8 w-8 p-0\"\n                                          >\n                                            <Minus size={14} />\n                                          </Button>\n                                          {editingSet?.exerciseId === exercise.id &&\n                                          editingSet?.setIndex === setIndex &&\n                                          editingSet?.field === 'duration' ? (\n                                            <div className=\"flex items-center space-x-1\">\n                                              <Input\n                                                value={editingSet.value}\n                                                onChange={e =>\n                                                  setEditingSet({\n                                                    ...editingSet,\n                                                    value: e.target.value,\n                                                  })\n                                                }\n                                                className=\"h-8 w-16 text-center text-sm\"\n                                              />\n                                              <Button\n                                                onClick={handleSetSave}\n                                                size=\"sm\"\n                                                className=\"h-8 w-8 p-0\"\n                                              >\n                                                <Save size={12} />\n                                              </Button>\n                                            </div>\n                                          ) : (\n                                            <button\n                                              onClick={() =>\n                                                handleSetEdit(exercise.id, setIndex, 'duration')\n                                              }\n                                              className=\"text-sm font-medium hover:text-blue-600 flex items-center space-x-1 min-w-[50px] justify-center h-8 px-2 border rounded\"\n                                            >\n                                              <span>{set.duration}s</span>\n                                              <Edit3 size={10} />\n                                            </button>\n                                          )}\n                                          <Button\n                                            onClick={() =>\n                                              incrementSet(exercise.id, setIndex, 'duration')\n                                            }\n                                            size=\"sm\"\n                                            variant=\"outline\"\n                                            className=\"h-8 w-8 p-0\"\n                                          >\n                                            <Plus size={14} />\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    )}\n                                  </div>\n                                )}\n\n                                {/* Mode rapide - affichage simple */}\n                                {quickMode && (\n                                  <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                                    <span>\n                                      {set.reps} reps\n                                      {set.weight && ` Ã— ${set.weight}kg`}\n                                      {set.duration && ` Ã— ${set.duration}s`}\n                                    </span>\n                                  </div>\n                                )}\n                              </div>\n                            ))\n                          ) : (\n                            <div className=\"text-center py-4 text-gray-500\">\n                              <p>Aucune sÃ©rie configurÃ©e pour cet exercice</p>\n                            </div>\n                          )}\n\n                          {/* Boutons pour ajouter/supprimer des sÃ©ries */}\n                          {!exercise.completed && !quickMode && (\n                            <div className=\"flex space-x-2 mt-4 pt-4 border-t border-gray-200\">\n                              <Button\n                                onClick={() => addSetToExercise(exercise.id)}\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"flex-1 text-blue-600 border-blue-300 hover:bg-blue-50\"\n                              >\n                                <Plus className=\"mr-1\" size={14} />\n                                Ajouter une sÃ©rie\n                              </Button>\n                              {exercise.sets && exercise.sets.length > 1 && (\n                                <Button\n                                  onClick={() =>\n                                    removeSetFromExercise(exercise.id, exercise.sets.length - 1)\n                                  }\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"flex-1 text-red-600 border-red-300 hover:bg-red-50\"\n                                >\n                                  <Minus className=\"mr-1\" size={14} />\n                                  Supprimer la derniÃ¨re\n                                </Button>\n                              )}\n                            </div>\n                          )}\n\n                          {!exercise.completed && (\n                            <Button\n                              onClick={() => handleExerciseComplete(exercise.id)}\n                              className=\"w-full bg-green-600 hover:bg-green-700 mt-4\"\n                            >\n                              <CheckCircle className=\"mr-2\" size={16} />\n                              Marquer comme terminÃ©\n                            </Button>\n                          )}\n                        </div>\n                      </CardContent>\n                    </CollapsibleContent>\n                  </Collapsible>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Stats Card */}\n        {currentSession && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <TrendingUp className=\"mr-2\" size={20} />\n                Statistiques de la session\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {Math.floor(workoutTime / 60)}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">Minutes</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">{completedExercises}</div>\n                  <div className=\"text-xs text-gray-500\">Exercices terminÃ©s</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-orange-600\">{estimatedCalories}</div>\n                  <div className=\"text-xs text-gray-500\">Calories estimÃ©es</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Session Summary Modal */}\n        <Dialog open={showSessionSummary} onOpenChange={setShowSessionSummary}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center\">\n                <Trophy className=\"mr-2 text-yellow-500\" size={24} />\n                Bravo ! Session terminÃ©e\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                  {formatTime(workoutTime)}\n                </div>\n                <p className=\"text-gray-600\">Temps d&apos;entraÃ®nement</p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <div className=\"text-xl font-bold text-blue-600\">{completedExercises}</div>\n                  <div className=\"text-xs text-gray-500\">Exercices</div>\n                </div>\n                <div>\n                  <div className=\"text-xl font-bold text-orange-600\">{estimatedCalories}</div>\n                  <div className=\"text-xs text-gray-500\">Calories</div>\n                </div>\n              </div>\n\n              <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n                <p className=\"text-green-800 font-medium\">\n                  ðŸŽ‰ Excellent travail ! Vous avez terminÃ© {Math.round(progressPercentage)}% de\n                  votre programme.\n                </p>\n              </div>\n\n              <Button onClick={() => setShowSessionSummary(false)} className=\"w-full\">\n                Fermer\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkoutPage;\n"],"names":["__iconNode","Pause","createLucideIcon","PenLine","Square","useWorkoutSessionCore","toast","useToast","queryClient","useQueryClient","appStoreUser","appStore","currentSession","setCurrentSession","useState","loadLocalSession","isSessionActive","setIsSessionActive","_a","saveLocalSession","session","raw","calculateCalories","useCallback","minutes","w","persistToSupabase","workoutData","error","supabase","e","updateSession","updates","updatedSession","startSession","workoutName","targetDuration","workout_type","difficulty","exercises","newSession","pauseSession","updated","resumeSession","completeSession","end","durationSec","completed","today","cancelSession","cancelled","useEffect","data","dbSession","useWorkoutTimer","totalTime","setTotalTime","exerciseTime","setExerciseTime","restTime","setRestTime","isResting","setIsResting","isPaused","setIsPaused","intervalRef","useRef","restTimeoutRef","prev","startExerciseTimer","startRestTimer","duration","pauseTimer","resumeTimer","resetTimer","formatTime","seconds","hours","secs","useWorkoutExercises","saveWeightHistory","addExercise","exercise","newEx","updateExerciseSet","exerciseId","setIndex","updatedExercises","ex","updatedSets","set","index","setUpdates","s","completeExercise","addSetToExercise","newSet","defaultSet","removeSetFromExercise","_","i","useExerciseHistory","getLastWeightForExercise","exerciseName","exerciseHistory","userHistory","entry","weight","history","loadExercisesFromLastSession","useWorkoutSession","sessionCore","timer","WorkoutPage","useLocation","editingSet","setEditingSet","workoutTime","setWorkoutTime","expandedExercise","setExpandedExercise","quickMode","setQuickMode","showSessionSummary","setShowSessionSummary","__error","__setError","isLoading","__setIsLoading","defaultExercises","workoutTips","Zap","Clock","Info","getCurrentTip","highPriorityTips","tip","handleStartWorkout","exercisesToAdd","handleSetEdit","field","handleSetSave","numValue","handleSetComplete","handleQuickSetComplete","handleExerciseComplete","nextExercise","handleCompleteSession","incrementSet","currentValue","increment","decrementSet","newValue","intervalId","prevTime","completedExercises","totalExercises","progressPercentage","estimatedCalories","currentTip","jsx","jsxs","Dumbbell","Card","CardHeader","CardTitle","Target","Button","CardContent","Play","CheckCircle","React","Collapsible","isOpen","CollapsibleTrigger","Badge","_b","ChevronUp","ChevronDown","CollapsibleContent","Minus","Input","Save","Edit3","Plus","TrendingUp","Dialog","DialogContent","DialogHeader","DialogTitle","Trophy"],"mappings":"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","x_google_ignoreList":[0,1,2]}